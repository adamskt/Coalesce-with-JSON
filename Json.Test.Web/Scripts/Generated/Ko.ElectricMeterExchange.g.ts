
/// <reference path="../coalesce.dependencies.d.ts" />

// Generated by IntelliTect.Coalesce

module ViewModels {
    
    export class ElectricMeterExchange extends Coalesce.BaseViewModel {
        public readonly modelName = "ElectricMeterExchange";
        public readonly primaryKeyName = "fieldWorkId";
        public readonly modelDisplayName = "Electric Meter Exchange";
        public readonly apiController = "/ElectricMeterExchange";
        public readonly viewController = "/ElectricMeterExchange";
        
        /** Configuration for all instances of ElectricMeterExchange. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig: Coalesce.ViewModelConfiguration<ElectricMeterExchange>
            = new Coalesce.ViewModelConfiguration<ElectricMeterExchange>(Coalesce.GlobalConfiguration.viewModel);
        
        /** Configuration for the current ElectricMeterExchange instance. */
        public coalesceConfig: Coalesce.ViewModelConfiguration<this>
            = new Coalesce.ViewModelConfiguration<ElectricMeterExchange>(ElectricMeterExchange.coalesceConfig);
        
        /** The namespace containing all possible values of this.dataSource. */
        public dataSources: typeof ListViewModels.ElectricMeterExchangeDataSources = ListViewModels.ElectricMeterExchangeDataSources;
        
        
        public meterVoltage: KnockoutObservable<string | null> = ko.observable(null);
        public fieldWorkId: KnockoutObservable<number | null> = ko.observable(null);
        public fieldCompletionDateTime: KnockoutObservable<moment.Moment | null> = ko.observable(moment());
        public inspections: KnockoutObservableArray<ViewModels.Inspection> = ko.observableArray([]);
        
        
        
        
        
        
        
        /** 
            Load the ViewModel object from the DTO.
            @param data: The incoming data object to load.
            @param force: Will override the check against isLoading that is done to prevent recursion. False is default.
            @param allowCollectionDeletes: Set true when entire collections are loaded. True is the default. 
            In some cases only a partial collection is returned, set to false to only add/update collections.
        */
        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true): void => {
            if (!data || (!force && this.isLoading())) return;
            this.isLoading(true);
            // Set the ID 
            this.myId = data.fieldWorkId;
            this.fieldWorkId(data.fieldWorkId);
            // Load the lists of other objects
            if (data.inspections != null) {
                Coalesce.KnockoutUtilities.RebuildArray(this.inspections, data.inspections, null, Inspection, this, allowCollectionDeletes);
            }
            
            // The rest of the objects are loaded now.
            this.meterVoltage(data.meterVoltage);
            if (data.fieldCompletionDateTime == null) this.fieldCompletionDateTime(null);
            else if (this.fieldCompletionDateTime() == null || this.fieldCompletionDateTime()!.valueOf() != new Date(data.fieldCompletionDateTime).getTime()){
                this.fieldCompletionDateTime(moment(new Date(data.fieldCompletionDateTime)));
            }
            if (this.coalesceConfig.onLoadFromDto()){
                this.coalesceConfig.onLoadFromDto()(this as any);
            }
            this.isLoading(false);
            this.isDirty(false);
            if (this.coalesceConfig.validateOnLoadFromDto()) this.validate();
        };
        
        /** Saves this object into a data transfer object to send to the server. */
        public saveToDto = (): any => {
            var dto: any = {};
            dto.fieldWorkId = this.fieldWorkId();
            
            dto.meterVoltage = this.meterVoltage();
            if (!this.fieldCompletionDateTime()) dto.fieldCompletionDateTime = null;
            else dto.fieldCompletionDateTime = this.fieldCompletionDateTime()!.format('YYYY-MM-DDTHH:mm:ssZZ');
            
            return dto;
        }
        
        /** 
            Loads any child objects that have an ID set, but not the full object.
            This is useful when creating an object that has a parent object and the ID is set on the new child.
        */
        public loadChildren = (callback?: () => void): void => {
            var loadingCount = 0;
            if (loadingCount == 0 && typeof(callback) == "function") { callback(); }
        };
        
        public setupValidation(): void {
            if (this.errors !== null) return;
            this.errors = ko.validation.group([
                this.meterVoltage.extend({ maxLength: 20 }),
                this.fieldCompletionDateTime.extend({ moment: { unix: true } }),
            ]);
            this.warnings = ko.validation.group([
            ]);
        }
        
        constructor(newItem?: object, parent?: Coalesce.BaseViewModel | ListViewModels.ElectricMeterExchangeList) {
            super(parent);
            this.baseInitialize();
            const self = this;
            
            
            
            
            
            
            self.meterVoltage.subscribe(self.autoSave);
            self.fieldCompletionDateTime.subscribe(self.autoSave);
            
            if (newItem) {
                self.loadFromDto(newItem, true);
            }
        }
    }
    
    export namespace ElectricMeterExchange {
    }
}
